plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2" apply false
    id "net.kyori.blossom" version "1.3.0" apply false
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "signing"

    group = "net.creationreborn"

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
    }

    publishing {
        publications {
            mavenPublication(MavenPublication) {
                groupId group
                artifactId archivesBaseName
                version version
                pom {
                    name = "CRAPI"
                    description = "Creation Reborn API"
                    url = "https://github.com/creation-reborn/CRAPI"
                    developers {
                        developer {
                            id = "lxgaming"
                            name = "LXGaming"
                        }
                    }
                    issueManagement {
                        system = "GitHub Issues"
                        url = "https://github.com/creation-reborn/CRAPI/issues"
                    }
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/creation-reborn/CRAPI.git"
                        developerConnection = "scm:git:https://github.com/creation-reborn/CRAPI.git"
                        url = "https://github.com/creation-reborn/CRAPI"
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications
    }

    test {
        testLogging {
            exceptionFormat = "full"
        }

        useJUnitPlatform()
    }

    task signJar {
        doFirst {
            if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
                project.logger.warn("========== [WARNING] ==========")
                project.logger.warn("")
                project.logger.warn("   This build is not signed!   ")
                project.logger.warn("")
                project.logger.warn("========== [WARNING] ==========")
                throw new StopExecutionException()
            }
        }

        doLast {
            configurations.archives.allArtifacts.files.each {
                ant.signjar(
                        jar: it,
                        alias: project.property("signing.alias"),
                        storepass: project.property("signing.keyStorePassword"),
                        keystore: project.property("signing.keyStorePath"),
                        keypass: project.property("signing.keyStorePassword"),
                        preservelastmodified: project.property("signing.preserveLastModified"),
                        tsaurl: project.property("signing.timestampAuthority"),
                        digestalg: project.property("signing.digestAlgorithm")
                )
                project.logger.lifecycle("JAR Signed: " + it.name)

                signing.sign(it)
                project.logger.lifecycle("PGP Signed: " + it.name)
            }
        }
    }
}